{"version":3,"sources":["models/bear.model.ts","models/person.model.ts","models/player.model.ts","basic.ts"],"names":[],"mappings":";;;;AGAA,AHAA,ACAA,ACAA,ICAA,AHAA,ACAA,ACAA,IFAA,ECAA,ACAA,MCAA,GAAA,OAAA,CAAA,qBAAA,CAAA;AHAA,ACAA,ACAA;ACCA,AHDA,ACAA,ACAA,ICCA,QHDA,ACAA,ACAA,MCCA,GAAA,OAAA,CAAA,uBAAA,CAAA;AHEE,ACGA,ACDA,WFFA,ACGA,ACDA,IFFA,CAAY,CCGZ,ACDA,CDCY,ACDA,EFFZ,EAAwB,ACGxB,ACDA,EDCsB,ACDA;ACHxB,AHEI,ACGA,ACDA,ICJJ,KHES,ACGA,ACDA,KFFL,GAAa,AEEb,CCJJ,AFKI,ECDgB,CCJpB,AHEI,ACGiB,GCDG,CDCC,ACDA,CDCC,EEL1B,CAAA,IDIoB,EDCC,ECDgB,EDCE,CCDnC,QDCA,IELJ,CAAA,EAEA;AHCG,ACGC,ACDA,SDCK,ACDA,QDCL,CCDA,EDCgB,CCDC,GDCG,CAAC,ACDA,CAAC,ODCN,ECDC,EDCgB,ECDE,GAAnC,GDCA;AACA,ACDA,SDCK,ACDA,QAAL,EDCA,CCDgB,EDCE,ECDE,CAAC,CDCC,CAAC,MCDP,IDChB,ACDiC,IAAjC;ACHJ,AHCA,ACII,ACDD,ICJC,GAAG,EHCP,ACIS,CELU,GHCnB,CGDA,IFKI,GAAiB,IAAI,CAAC,SAAL,IAAkB,EAAnC;AEJJ,AHNA,ACWG,CDXH,EAAA,IGMO,CAAC,GAAR,CAAY,GAAZ;AACA,ADGA,ICHI,GAAG,EDGP,CCHkB,EAAlB,GDGA;ACFA,AHRa,ACYb,ACZA,CAAA,EAAA,ICQO,AHRM,CGQL,AHRK,CCYb,EEJA,CAAY,AHRC,GGQb,AHRa,ACYb,IDZa;AGSb,AFTA,CAAA,EAAA,CESI,GAAG,GAAW,YAAlB;AACA,ADVa,OCUN,ADVM,CCUL,ADVK,GCUb,CAAY,EDVC,CCUb,EDVa,CCYb,KDZa;ADAA,OAAA,CAAA,MAAA,GAAA,MAAA;AEcb,IAAI,GAAG,GAAqB,EAA5B,EAA+B;;AAC/B,OAAO,CAAC,GAAR,CAAY,GAAZ,GAEA;AAEA;;AAEA,IAAI,GAAG,GAAG,aAAV,EAAwB;;AAExB,IAAM,SAAS,GAAG,IAAI,YAAA,CAAA,IAAJ,CAAS,CAAT,CAAlB,EACA;;AACA,IAAI,SAAS,YAAY,YAAA,CAAA,IAAzB,EAA+B;AAC7B,EAAA,OAAO,CAAC,GAAR,CAAY,SAAZ;AACD,EAED;;;AAEA,IAAI,SAAS,GAAQ,KAArB,EACA;;AACA,OAAO,CAAC,IAAR,CAAa,SAAb;AACA,OAAO,CAAC,IAAR,CAAuB,SAAvB,GAEA;;AACA,IAAM,QAAQ,GAAa,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CAA3B;AACA,OAAO,CAAC,IAAR,CAAa,QAAb,GAEA;;AACA,IAAM,MAAM,GAAyB,CAAC,CAAD,EAAG,CAAH,EAAM,KAAN,EAAa,KAAb,EAAoB,CAApB,EAAuB,IAAvB,CAArC;AACA,OAAO,CAAC,IAAR,CAAa,MAAb,GAEA;;AACA,IAAM,MAAM,GAAgB,CAAE,CAAC,IAAD,EAAO,IAAP,CAAF,EAAgB,CAAE,KAAF,EAAQ,IAAR,CAAhB,CAA5B;AACA,OAAO,CAAC,IAAR,CAAa,MAAb,GAEA;;AACA,IAAM,OAAO,GAA6B,CAAC,iBAAD,EAAoB,EAApB,EAAwB,SAAxB,CAA1C;AACA,OAAO,CAAC,GAAR,CAAY,OAAZ,GAEA;AACA;;AAEA,SAAS,QAAT,CAAkB,MAAlB,EAAgC;AAC9B,SAAO,mBAAiB,MAAM,CAAC,SAAxB,GAAiC,GAAjC,GAAqC,MAAM,CAAC,QAAnD;AACD;;AACD,OAAO,CAAC,GAAR,CAAY,QAAQ,CAAC,IAAI,cAAA,CAAA,MAAJ,CAAW;AAAC,EAAA,SAAS,EAAE,EAAZ;AAAgB,EAAA,QAAQ,EAAE;AAA1B,CAAX,CAAD,CAApB;AAEA,OAAO,CAAC,GAAR,CAAY,QAAQ,CAAC,IAAI,cAAA,CAAA,MAAJ,CAAW;AAAC,EAAA,SAAS,EAAE,OAAZ;AAAqB,EAAA,QAAQ,EAAE;AAA/B,CAAX,CAAD,CAApB,GAEA;;AACA,SAAS,GAAT,CAAa,IAAb,EAA2B,IAA3B,EAAuC;AACrC,SAAO,IAAI,GAAG,IAAd;AACD,EAED;;;AACA,SAAS,WAAT,GAAoB;AAClB,EAAA,GAAG,CAAC,CAAD,EAAG,CAAH,CAAH;AACD,EAED;;;AACA,SAAS,YAAT,GAAqB;AACnB,QAAM,KAAN;AACD;;AAQD,IAAM,MAAM,GAAW;AACrB,EAAA,SAAS,EAAE;AADU,CAAvB;AAIA,OAAO,CAAC,GAAR,CAAY,MAAZ,GAEA;AAEA;;AACA,IAAM,SAAS,GAAW,IAAI,cAAA,CAAA,MAAJ,CAAW,EAAX,CAA1B;AACA,OAAO,CAAC,GAAR,CAAY,SAAZ;AAEA,IAAM,SAAS,GAAW,IAAI,cAAA,CAAA,MAAJ,CAAW;AACnC,EAAA,QAAQ,EAAE,UADyB;AAEnC,EAAA,SAAS,EAAE,CAFwB;AAGnC,EAAA,QAAQ,EAAE;AAHyB,CAAX,CAA1B;AAKA,OAAO,CAAC,GAAR,CAAY,SAAZ","file":"basic.e1acca1f.js","sourceRoot":"..","sourcesContent":["export class Bear {\r\n  claws: number;\r\n\r\n  constructor(data: number) {\r\n    this.claws = data;\r\n  }\r\n}","export class Person {\r\n  firstName: string;\r\n  middleName: string;\r\n  lastName: string;\r\n  playerNum: number;\r\n\r\n  constructor(data?: any) {\r\n    this.firstName = data.firstName || 'Michael';\r\n    this.lastName = data.lastName || 'jordan';\r\n    this.middleName = data.middleName;\r\n    this.playerNum = data.playerNum || 23;\r\n  }\r\n}","export class Player {\r\n  lastName: string;\r\n  playerNum: number;\r\n  position: string;\r\n\r\n  constructor(data?: any) {\r\n    this.lastName = data.lastName || 'a';\r\n    this.playerNum = data.playerNum || '0';\r\n    this.position = data.position || 'qb';\r\n  }\r\n}","import { Bear } from \"./models/bear.model\";\r\nimport { Person } from \"./models/person.model\";\r\nimport { Player } from \"./models/player.model\";\r\n\r\n//basic $typing\r\nlet ex1: boolean = true;\r\nconsole.log(ex1)\r\nlet ex2: number = 35; \r\nconsole.log(ex2)\r\nlet ex3: string = 'hello russ'; \r\nconsole.log(ex3)\r\n\r\n//sometimes you need $multiple types \r\n\r\nlet ex4: boolean | number = 35 //good \r\nconsole.log(ex4); \r\n\r\n//always limit to single type if possible. \r\n\r\n// $implicit types \r\n\r\nlet ex5 = 'hello world' //auto detects type string \r\n\r\nconst berryBear = new Bear(3);\r\n//$type checking, when we cannot use typeof \r\nif (berryBear instanceof Bear) {\r\n  console.log(berryBear)\r\n} \r\n\r\n//type $assertations  \r\n\r\nlet notString: any = 1.876\r\n//you can now use this, like in SQL:\r\nconsole.info(notString as string)\r\nconsole.info((<string> notString))\r\n\r\n//$arrays \r\nconst exArray1: number[] = [1,2,3] \r\nconsole.info(exArray1) \r\n\r\n//assign multiple types! \r\nconst exArr2: (number | boolean)[] = [1,2, false, false, 3, true]\r\nconsole.info(exArr2)\r\n\r\n//multi-demension! \r\nconst exArr3: boolean[][] = [ [true, true], [ false,true ] ];\r\nconsole.info(exArr3)  \r\n\r\n//tuples \r\nconst exTuple: [string, number, string] = ['russ is the law', 38, 'aww yeh']\r\nconsole.log(exTuple) \r\n\r\n//Parameters \r\n//Person becomes like a type  \r\n\r\nfunction sayHello(person: Person): string {\r\n  return `Say hello to, ${person.firstName} ${person.lastName}`\r\n} \r\nconsole.log(sayHello(new Person({firstName: '', lastName: ''})))\r\n\r\nconsole.log(sayHello(new Person({firstName: 'Kevin', lastName: 'Garnett'})))\r\n\r\n//$return types \r\nfunction add(num1: number, num2: number): number {\r\n  return num1 + num2;\r\n}\r\n\r\n// not everything has a return type, in this case, use void \r\nfunction voidExample(): void {\r\n  add(1,2);\r\n} \r\n\r\n//if a function never does anything, use never\r\nfunction neverExample(): never {\r\n  throw Error;\r\n}  \r\n\r\n// $custome types \r\n//this way is sort of depracated in favor of interfaces and classes\r\ntype person = {\r\n  firstName: string\r\n} \r\n\r\nconst exObj2: person = {\r\n  firstName: 'Matthias'\r\n} \r\n\r\nconsole.log(exObj2)  \r\n\r\n//$classes \r\n\r\n// pass in player with nothing \r\nconst exPlayer1: Player = new Player({});\r\nconsole.log(exPlayer1);\r\n\r\nconst exPlayer2: Player = new Player({\r\n  lastName: 'Robinson',\r\n  playerNum: 1,\r\n  position: 'C'\r\n});\r\nconsole.log(exPlayer2)\r\n"]}