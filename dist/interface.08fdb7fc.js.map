{"version":3,"sources":["interface.ts"],"names":[],"mappings":";;;AAUA,IAAM,SAAS,GAAW;AACxB,EAAA,SAAS,EAAE,OADa;AAExB,EAAA,UAAU,EAAE;AAFY,CAA1B,EAKA;AACA;;AAEA,OAAO,CAAC,GAAR,CAAY,SAAZ,GAEA;AACA;AACA;;AAEA,IAAI,GAAJ;AACA,IAAI,IAAJ;AACA,IAAI,GAAJ;AAIA,IAAI,UAAU,GAAe;AAC3B,EAAA,KAAK,EAAG,IADmB;AAE3B,EAAA,KAAK,EAAG,CAFmB;AAG3B,EAAA,MAAM,EAAE,GAHmB;AAI3B,EAAA,KAAK,EAAG,KAJmB;AAK3B,EAAA,MAAM,EAAE,IALmB;AAM3B,EAAA,KAAK,EAAG;AANmB,CAA7B,EAQA;;AACA,OAAO,CAAC,GAAR,CAAY,UAAZ;AAEA,UAAU,CAAC,KAAX,GAAmB,CAAnB;AACA,OAAO,CAAC,GAAR,CAAY,UAAU,CAAC,KAAvB;AAaA,IAAI,GAAG,GAAQ;AACX,EAAA,CAAC,EAAE;AACC,IAAA,CAAC,EAAE,IADJ;AAEC,IAAA,CAAC,EAAE,aAFJ;AAGC,IAAA,CAAC,EAAE;AAHJ;AADQ,CAAf;AAQA,OAAO,CAAC,GAAR,CAAY,MAAZ,EAAoB,GAApB,GAGA;AACA;AACA;;AACA,SAAS,SAAT,CAAsB,GAAtB,EAA4B;AAC1B,SAAO,GAAP;AACD;;AAED,OAAO,CAAC,IAAR,CAAa,SAAS,CAAC,GAAD,CAAtB,GAEA;;AAEA,SAAS,UAAT,CAAuB,GAAvB,EAA+B;AAC7B,SAAO,GAAP;AACD;;AAED,OAAO,CAAC,IAAR,CAAc,UAAU,CAAC,CAAC,CAAD,CAAD,CAAxB,GAGA;AACA","file":"interface.08fdb7fc.js","sourceRoot":"..","sourcesContent":["//interfaces are great for creatin custom types\r\n//interfaces can't do default values or enforce things from servers\r\nimport { Person } from './interfaces/person.interface';\r\n\r\n//barrel importing\r\n//circular dependencies can cause errors, avoid them!\r\nimport { Man, Bear, Pig } from './interfaces/index';\r\n\r\nimport { BearModel } from './models/bear.model';\r\n\r\nconst personEx1: Person = {\r\n  firstName: 'Barak',\r\n  middleName: ''\r\n}\r\n\r\n// personEx1.middleName = 'Hussein';\r\n// personEx1.lastName  = 'Obama';\r\n\r\nconsole.log(personEx1);  \r\n\r\n//$intersection types\r\n//intersection types are the ability to add multiple types to a single class\r\n// as well as create a new type based off of that. \r\n\r\nlet man: Man;  \r\nlet bear: Bear;\r\nlet pig: Pig;\r\n\r\ntype manBearPig = Bear & Man & Pig;\r\n\r\nlet manBearPig: manBearPig = {\r\n  snout : true,\r\n  claws : 5,\r\n  weight: 740,\r\n  intel : false,\r\n  speech: true,\r\n  snort : false\r\n}\r\n//now we can use all of the properties!!  \r\nconsole.log(manBearPig)\r\n\r\nmanBearPig.claws = 4;\r\nconsole.log(manBearPig.claws)\r\n\r\n//another example, notice x\r\ninterface D { d: boolean; }\r\ninterface E { e: string; }\r\ninterface F { f: number; }\r\n\r\ninterface A { x: D; }\r\ninterface B { x: E; }\r\ninterface C { x: F; }\r\n\r\ntype ABC = A & B & C;\r\n\r\nlet abc: ABC = {\r\n    x: {\r\n        d: true,\r\n        e: 'codingblast',\r\n        f: 3\r\n    }\r\n};\r\n\r\nconsole.log('abc:', abc); \r\n\r\n\r\n//$generics\r\n// a way to manipulate and add clarity to a weird type..\r\n// say we don't know what it is, or manipulate after passing in\r\nfunction genericEx<T>(arg: T): T {\r\n  return arg;\r\n}\r\n\r\nconsole.info(genericEx(104));  \r\n\r\n//we can also do it with arrays! \r\n\r\nfunction genericEx2<T>(arg: T[]): T[] {\r\n  return arg;\r\n}\r\n\r\nconsole.info((genericEx2([5])))  \r\n\r\n\r\n//$access modifier \r\n//who can access a function, like solidity or vyper or python.\r\n\r\n"]}